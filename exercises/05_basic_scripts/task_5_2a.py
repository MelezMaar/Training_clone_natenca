# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""


ip_template = '''
Network:
{0:<10} {1:<10} {2:<10} {3:<10}
{0:08b}   {1:08b}   {2:08b}   {3:08b}

Mask:
{8:}
{4:<10} {5:<10} {6:<10} {7:<10}
{4:08b}   {5:08b}   {6:08b}   {7:08b}
'''

prefix = input("Введите адрес сети: ")
#prefix = "10.11.230.13/19"
ip = prefix[:-3]
number_ip = ip.split('.')
mask = prefix[-3:]

number_ip[0] = int(number_ip[0])
number_ip[1] = int(number_ip[1])
number_ip[2] = int(number_ip[2])
number_ip[3] = int(number_ip[3])
# Ниже мы сначало получаем выражение ip адресса ввиде строки двоичной системы счисления
# А затем преобразовываем ее в строку, в соответсвии маске
number_ip_bin = '{0:08b}{1:08b}{2:08b}{3:08b}'.format(number_ip[0], number_ip[1], number_ip[2], number_ip[3])
number_ip_bin_lan = number_ip_bin[:-(32-int(mask[1:]))] + "0" * (32-int(mask[1:]))
# А тут мы уже получаем адрес сети
number_ip[0] = int(number_ip_bin_lan[:-24], 2)
number_ip[1] = int(number_ip_bin_lan[8:-16], 2)
number_ip[2] = int(number_ip_bin_lan[16:-8], 2)
number_ip[3] = int(number_ip_bin_lan[24:], 2)

mask_bin = "1" * int(mask[1:]) + "0" * (32 - int(mask[1:]))
number_mask = []
number_mask.append(int(mask_bin[:-24], 2))
number_mask.append(int(mask_bin[8:-16], 2))
number_mask.append(int(mask_bin[16:-8], 2))
number_mask.append(int(mask_bin[24:], 2))

print(ip_template.format(number_ip[0], number_ip[1], number_ip[2], number_ip[3], number_mask[0], number_mask[1], number_mask[2], number_mask[3], mask))